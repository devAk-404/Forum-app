// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  username  String  @unique
  email     String  @unique
  password  String
  isCreator Boolean @default(false)

  // The opposite relation to comments (User has many comments)
  comments Comment[] @relation("UserComments") // <-- Added relation
  blogs    Blog[]    @relation("UserBlogs")
  Comment  Comment[]
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())

  createdBy   User @relation("UserBlogs", fields: [createdById], references: [id])
  createdById Int

  // The opposite relation to comments (Blog has many comments)
  comments Comment[] @relation("BlogComments") // <-- Added relation
  Comment  Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  parentId  Int? // This field is nullable, used for parent-child comment relationships

  // Relation to Blog
  blog   Blog @relation(fields: [blogId], references: [id], map: "Comment_blogId_fkey")
  blogId Int

  // Relation to User
  user   User @relation(fields: [userId], references: [id], map: "Comment_userId_fkey")
  userId Int

  // Opposite relations (back-reference for Prisma)
  blogRelation Blog @relation("BlogComments", fields: [blogId], references: [id], map: "Comment_blogRelation_fkey")
  userRelation User @relation("UserComments", fields: [userId], references: [id], map: "Comment_userRelation_fkey")
}
